name: CI-CD (Build & Deploy to Tomcat) - Prepatch WAR

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "8"
          cache: maven

      - name: Build (skip tests)
        run: mvn -B -DskipTests package

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-war
          path: target/*.war

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download WAR
        uses: actions/download-artifact@v4
        with:
          name: app-war
          path: .

      - name: Pick artifact
        id: pick
        run: |
          WAR=$(ls *.war | head -n1)
          echo "war_file=$WAR" >> $GITHUB_OUTPUT
          echo "war_basename=$(basename $WAR)" >> $GITHUB_OUTPUT
          echo "war_dir=$(pwd)" >> $GITHUB_OUTPUT

      # --- 여기서 사전 패치: WAR 안에 Config.properties 삽입 ---
      - name: Prepare Config.properties (from secret)
        id: cfg
        run: |
          mkdir -p config-patch
          # 멀티라인 Secret을 그대로 파일로
          printf "%s" "${{ secrets.PROD_CONFIG_PROPERTIES }}" > config-patch/Config.properties
          # 파일 확인(로그에는 내용 출력 안 함)
          echo "Config.properties size: $(wc -c < config-patch/Config.properties) bytes"

      - name: Patch WAR with Config.properties
        id: patch
        run: |
          set -e
          WAR_IN="${{ steps.pick.outputs.war_file }}"
          mkdir -p build/exploded
          unzip -q "$WAR_IN" -d build/exploded

          # 클래스패스 기준: /config/Config.properties  →  WEB-INF/classes/config/Config.properties
          mkdir -p build/exploded/WEB-INF/classes/config
          cp -f config-patch/Config.properties build/exploded/WEB-INF/classes/config/Config.properties

          # 새 WAR(이름은 ROOT.war로 통일하여 배포)
          (cd build/exploded && zip -qr ../ROOT.war .)
          echo "patched_war=build/ROOT.war" >> $GITHUB_OUTPUT

      - name: Copy WAR to server (/tmp/ROOT.war)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: ${{ steps.patch.outputs.patched_war }}
          target: /tmp/

      - name: Deploy on remote (stop -> replace -> start)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            WEBAPPS="${{ secrets.PROD_TOMCAT_WEBAPPS }}"
            SVC="${{ secrets.PROD_TOMCAT_SERVICE }}"
            SRC="/tmp/ROOT.war"

            # 백업 폴더
            sudo mkdir -p ${WEBAPPS}/../releases

            # 기존 ROOT.war 백업(있을 때만)
            if [ -f ${WEBAPPS}/ROOT.war ]; then
              TS=$(date +%Y%m%d%H%M%S)
              sudo cp -f ${WEBAPPS}/ROOT.war ${WEBAPPS}/../releases/ROOT-${TS}.war || true
            fi

            # 배포
            sudo systemctl stop "$SVC" || true
            sudo rm -rf ${WEBAPPS}/ROOT ${WEBAPPS}/ROOT.war
            sudo mv "$SRC" ${WEBAPPS}/ROOT.war
            # Tomcat 실행계정에 맞게 소유자 보정(예: tomcat:tomcat)
            if id tomcat >/dev/null 2>&1; then
              sudo chown tomcat:tomcat ${WEBAPPS}/ROOT.war
            fi
            sudo systemctl start "$SVC"
            sleep 5
            sudo systemctl --no-pager status "$SVC" || true

      - name: Health check (HTTPS)
        run: |
          url="https://${{ secrets.PROD_DOMAIN }}/"
          for i in {1..30}; do
            code=$(curl -k -s -o /dev/null -w '%{http_code}' "$url")
            echo "try=$i code=$code"
            if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
              echo "OK ($code)"
              exit 0
            fi
            sleep 2
          done
          echo "Health check failed"; exit 1
