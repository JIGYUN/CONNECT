name: CI-CD (Build & Deploy to Tomcat)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: cd-main
  cancel-in-progress: true

permissions:
  contents: read

env:
  PROJECT_DIR: CONNECT   # pom.xml 이 있는 하위 폴더

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '8'
          cache: maven

      # 하위폴더의 pom.xml 을 지정해서 빌드
      - name: Build (skip tests)
        run: mvn -B -DskipTests -f "${{ env.PROJECT_DIR }}/pom.xml" clean package

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-war
          path: ${{ env.PROJECT_DIR }}/target/*.war

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download WAR
        uses: actions/download-artifact@v4
        with:
          name: app-war
          path: .

      - name: Pick artifact
        id: pick
        shell: bash
        run: |
          set -e
          WAR=$(ls -1 *.war | head -n1)
          echo "war_file=$WAR" >> "$GITHUB_OUTPUT"
          echo "war_basename=$(basename "$WAR")" >> "$GITHUB_OUTPUT"

      # ===== (옵션) Config.properties 배포 =====
      # secrets를 if에서 직접 쓰지 않고 env로 전달 후, 쉘에서 빈값 검사
      - name: (opt) Prepare Config.properties
        env:
          CONF_B64: ${{ secrets.PROD_CONFIG_B64 }}
        run: |
          if [ -z "${CONF_B64}" ]; then
            echo "No PROD_CONFIG_B64 set -> skip creating Config.properties"
            exit 0
          fi
          echo "${CONF_B64}" | base64 -d > Config.properties
          ls -al Config.properties

      - name: (opt) Copy Config.properties to server
        if: ${{ hashFiles('Config.properties') != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key:      ${{ secrets.PROD_SSH_KEY }}
          source:   Config.properties
          target:   /tmp/

      - name: (opt) Move Config.properties into place
        if: ${{ hashFiles('Config.properties') != '' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key:      ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            TARGET="${{ secrets.PROD_CONFIG_TARGET }}"
            if [ -z "${TARGET}" ]; then
              echo "PROD_CONFIG_TARGET not set -> skip moving"
              exit 0
            fi
            sudo mkdir -p "$(dirname "${TARGET}")"
            sudo mv /tmp/Config.properties "${TARGET}"
            sudo chown tomcat:tomcat "${TARGET}"
            sudo chmod 600 "${TARGET}"
      # ===== (옵션) 끝 =====

      - name: Copy WAR to server (/tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key:      ${{ secrets.PROD_SSH_KEY }}
          source:   ${{ steps.pick.outputs.war_file }}
          target:   /tmp/

      - name: Deploy on remote (restart tomcat)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key:      ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -euo pipefail
            WAR_NAME="${{ steps.pick.outputs.war_basename }}"
            WEBAPPS="${{ secrets.PROD_TOMCAT_WEBAPPS }}"
            SERVICE="${{ secrets.PROD_TOMCAT_SERVICE }}"

            sudo mkdir -p "${WEBAPPS}/../releases"
            if [ -f "${WEBAPPS}/ROOT.war" ]; then
              TS=$(date +%Y%m%d%H%M%S)
              sudo cp -f "${WEBAPPS}/ROOT.war" "${WEBAPPS}/../releases/ROOT-${TS}.war" || true
            fi

            sudo systemctl stop "$SERVICE" || true
            sudo rm -rf "${WEBAPPS}/ROOT" "${WEBAPPS}/ROOT.war"
            sudo mv "/tmp/${WAR_NAME}" "${WEBAPPS}/ROOT.war"
            sudo chown tomcat:tomcat "${WEBAPPS}/ROOT.war"
            sudo systemctl start "$SERVICE"

            # 8080 포트가 뜰 때까지 기다림(최대 30초)
            for i in {1..30}; do
              if sudo ss -ltnp | grep -q ":8080"; then
                echo "Tomcat is listening on 8080"
                break
              fi
              sleep 1
            done
            sudo systemctl --no-pager status "$SERVICE" || true

      - name: Health check (HTTPS)
        shell: bash
        run: |
          url="https://${{ secrets.PROD_DOMAIN }}/"
          for i in {1..30}; do
            code=$(curl -k -s -o /dev/null -w '%{http_code}' "$url")
            if [ "$code" = "200" ] || [ "$code" = "302" ]; then
              echo "Health OK ($code)"
              exit 0
            fi
            sleep 2
          done
          echo "Health check failed"
          exit 1
