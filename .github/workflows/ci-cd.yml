name: CI-CD (Build & Deploy to Tomcat - B plan)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

# 필요 권한 최소화
permissions:
  contents: read

# pom.xml 이 위치한 하위 폴더 (루트면 공란/삭제)
env:
  PROJECT_DIR: CONNECT

concurrency:
  group: cd-main
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "8"
          cache: maven

      - name: Build (skip tests)
        working-directory: ${{ env.PROJECT_DIR }}
        run: mvn -B -DskipTests clean package

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-war
          path: ${{ env.PROJECT_DIR }}/target/*.war

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download WAR
        uses: actions/download-artifact@v4
        with:
          name: app-war
          path: .

      - name: Pick artifact
        id: pick
        shell: bash
        run: |
          WAR=$(ls *.war | head -n1)
          echo "war_file=$WAR" >> "$GITHUB_OUTPUT"
          echo "war_basename=$(basename "$WAR")" >> "$GITHUB_OUTPUT"

      - name: Copy WAR to server (/tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: ${{ steps.pick.outputs.war_file }}
          target: /tmp/

      # 선택: PROD_CONFIG 시크릿이 존재할 때만 /tmp/ci-config.properties 생성
      - name: Put Config.properties to /tmp (plain secret)
        if: ${{ secrets.PROD_CONFIG != '' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          # 아래 envs 로 넘긴 환경변수를 원격에서 그대로 사용
          envs: PROD_CONFIG
          script: |
            set -e
            printf '%s\n' "$PROD_CONFIG" > /tmp/ci-config.properties
            chmod 600 /tmp/ci-config.properties

      # wrapper 가 root 로 실행되어 WAR 배포 + Config 덮어쓰기까지 처리
      - name: Deploy via wrapper (with optional config)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            WAR="/tmp/${{ steps.pick.outputs.war_basename }}"
            CFG="/tmp/ci-config.properties"
            if [ -f "$CFG" ]; then
              sudo /usr/local/bin/deploy_tomcat.sh "$WAR" "$CFG"
            else
              sudo /usr/local/bin/deploy_tomcat.sh "$WAR"
            fi

      - name: Health check (HTTPS)
        shell: bash
        run: |
          url="https://${{ secrets.PROD_DOMAIN }}/"
          for i in {1..30}; do
            code=$(curl -k -s -o /dev/null -w '%{http_code}' "$url")
            if [ "$code" = "200" ] || [ "$code" = "302" ]; then
              echo "OK ($code)"
              exit 0
            fi
            sleep 2
          done
          echo "Health check failed"; exit 1
