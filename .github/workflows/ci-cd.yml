name: CI-CD (Build & Deploy to Tomcat - plain PROD_CONFIG)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: cd-main
  cancel-in-progress: true

permissions:
  contents: read

env:
  PROJECT_DIR: CONNECT

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "8"
          cache: maven

      - name: Build (skip tests)
        working-directory: ${{ env.PROJECT_DIR }}
        run: mvn -B -DskipTests clean package

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-war
          path: ${{ env.PROJECT_DIR }}/target/*.war

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download WAR
        uses: actions/download-artifact@v4
        with:
          name: app-war
          path: .

      - name: Pick artifact
        id: pick
        run: |
          WAR=$(ls *.war | head -n1)
          echo "war_file=$WAR" >> $GITHUB_OUTPUT
          echo "war_basename=$(basename "$WAR")" >> $GITHUB_OUTPUT

      - name: Copy WAR to server (/tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: ${{ steps.pick.outputs.war_file }}
          target: /tmp/

      - name: Deploy by sudo wrapper (restart tomcat)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            WAR_NAME="${{ steps.pick.outputs.war_basename }}"
            echo "[CI] Deploying /tmp/${WAR_NAME}"
            sudo /usr/local/bin/deploy_tomcat.sh "/tmp/${WAR_NAME}"

      # ---- 요기 수정: heredoc 제거하고 printf|tee 로 안전하게 기록 ----
      - name: Place external Config.properties (plain secret)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          envs: PROD_CONFIG
          script: |
            set -e
            WEBAPPS="${{ secrets.PROD_TOMCAT_WEBAPPS }}"
            CFG_DIR="${WEBAPPS}/ROOT/WEB-INF/classes/config"
            CFG_FILE="${CFG_DIR}/Config.properties"

            echo "[CI] Waiting ROOT to explode..."
            for i in {1..60}; do
              if sudo test -d "${WEBAPPS}/ROOT/WEB-INF/classes"; then
                break
              fi
              sleep 1
            done

            # 디렉터리 생성 + 권한
            sudo install -d -o tomcat -g tomcat -m 755 "${CFG_DIR}"

            # 시크릿 원문을 그대로 파일에 씀(루트 권한으로 생성)
            printf '%s\n' "$PROD_CONFIG" | sudo tee "${CFG_FILE}" >/dev/null

            sudo chown tomcat:tomcat "${CFG_FILE}"
            sudo chmod 600 "${CFG_FILE}"
            echo "[CI] Config.properties updated at ${CFG_FILE}"

      - name: Health check (HTTPS)
        run: |
          url="https://${{ secrets.PROD_DOMAIN }}/"
          for i in {1..30}; do
            code=$(curl -k -s -o /dev/null -w '%{http_code}' "$url")
            if [ "$code" = "200" ] || [ "$code" = "302" ]; then
              echo "OK ($code)"
              exit 0
            fi
            sleep 2
          done
          echo "Health check failed"; exit 1
