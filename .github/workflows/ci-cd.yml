name: CI-CD (Build & Deploy to Tomcat - A plan)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: cd-main
  cancel-in-progress: true

env:
  # 저장소 내에서 pom.xml 이 있는 하위 디렉토리명 (루트면 빈 값으로 두고 아래 working-directory 제거)
  PROJECT_DIR: CONNECT

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "8"
          cache: maven

      - name: Build (skip tests)
        working-directory: ${{ env.PROJECT_DIR }}
        run: mvn -B -DskipTests clean package

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-war
          path: ${{ env.PROJECT_DIR }}/target/*.war

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # --- 아티팩트 다운로드 & 파일명 추출 ---
      - name: Download WAR
        uses: actions/download-artifact@v4
        with:
          name: app-war
          path: .

      - name: Pick artifact
        id: pick
        shell: bash
        run: |
          set -e
          WAR=$(ls -1 *.war | head -n1)
          echo "war_file=$WAR" >> $GITHUB_OUTPUT
          echo "war_basename=$(basename "$WAR")" >> $GITHUB_OUTPUT
          echo "Picked WAR: $WAR"

      # --- WAR 파일을 서버 /tmp 로 업로드 ---
      - name: Copy WAR to server (/tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: ${{ steps.pick.outputs.war_file }}
          target: /tmp/

      # --- (선택) Secret에서 Config 생성해서 /tmp 로 업로드 ---
      # PROD_CONFIG 시크릿이 "비어있지 않으면" 실행됩니다.
      - name: Create local Config file from secret (optional)
        if: ${{ secrets.PROD_CONFIG != '' }}
        shell: bash
        run: |
          set -e
          printf '%s' "${{ secrets.PROD_CONFIG }}" > config-real.properties

      - name: Copy Config to server (/tmp) (optional)
        if: ${{ secrets.PROD_CONFIG != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: config-real.properties
          target: /tmp/

      # --- 래퍼 스크립트 한 번만 sudo 로 호출 ---
      - name: Deploy via wrapper (sudo deploy_tomcat.sh)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            WAR="/tmp/${{ steps.pick.outputs.war_basename }}"
            CFG="/tmp/config-real.properties"
            echo "[CI] calling wrapper: $WAR (cfg: $CFG if exists)"
            if [ -f "$CFG" ]; then
              sudo /usr/local/bin/deploy_tomcat.sh "$WAR" "$CFG"
            else
              sudo /usr/local/bin/deploy_tomcat.sh "$WAR"
            fi

      # --- 헬스체크 (도메인 필수) ---
      - name: Health check (HTTPS)
        env:
          DOMAIN: ${{ secrets.PROD_DOMAIN }}
        shell: bash
        run: |
          set -e
          if [ -z "$DOMAIN" ]; then
            echo "[CI] PROD_DOMAIN secret is empty. Skip health check."
            exit 0
          fi
          url="https://${DOMAIN}/"
          echo "[CI] Health check: $url"
          for i in {1..30}; do
            code=$(curl -k -s -o /dev/null -w '%{http_code}' "$url" || true)
            echo "try#$i -> $code"
            if [ "$code" = "200" ] || [ "$code" = "302" ]; then
              echo "OK ($code)"
              exit 0
            fi
            sleep 2
          done
          echo "Health check failed"
          exit 1
